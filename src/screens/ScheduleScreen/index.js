/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * @description
 * @file index.js
 * @author: Oskar Yildiz <oskar> 2018-02-22T19:30:17+01:00
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by Oskar Yildiz <oskar> on 2018-02-22T19:30:17+01:00.
 * Last modified by oskar on 2018-02-22T19:30:18+01:00
 *
 */

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { ScrollView, Text } from 'react-native';

import scheduleStyles from './schedule.styles';
import commonStyles from '../../styles/common.styles';
import { getFullSchedule } from '../../redux/schedule/actions';
import ClassCard from './components/ClassCard';

class ScheduleScreen extends Component {
  constructor(props) {
    super(props);
  }

  async componentWillMount() {
    await this.props.getFullSchedule();
  }

  renderClasses() {
    const schedule = this.props.schedule.schedule;
    return schedule.map(singleClass => (
      <ClassCard
        key={singleClass.subject}
        classTitle={singleClass.subject}
        classTime={`${singleClass.start_time}-${singleClass.end_time}`}
        classDescription={`${singleClass.participants
          .split(',')
          .slice(2, 3)
          .join('')}`}
      />
    ));
  }

  // TODO: Design individual schedule/class component and map through schedule and render each class as that component here
  render() {
    return (
      <ScrollView
        contentContainerStyle={scheduleStyles.contentContainer}
        style={scheduleStyles.container}
      >
        <Text style={scheduleStyles.header}>Schema</Text>
        {this.props.schedule.schedule && this.renderClasses()}
        {this.props.schedule.schedule.length === 0 && <Text style={scheduleStyles.noClassesText}>Inga lektioner idag!</Text> }
      </ScrollView>
    );
  }
}

function mapStateToProps(state) {
  return {
    schedule: state.schedule,
    auth: state.auth
  };
}

export default connect(mapStateToProps, { getFullSchedule })(ScheduleScreen);
